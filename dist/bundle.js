!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.fsmx=e():t.fsmx=e()}(this,(function(){return function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(r,o){function s(t){try{a(i.next(t))}catch(t){o(t)}}function u(t){try{a(i.throw(t))}catch(t){o(t)}}function a(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,u)}a((i=i.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});const r="No initial state defined",o="Initial state should be string",s="No actions defined",u="Can't transit to target";e.default=class{constructor(t){if(this.state=null,!t.initial)throw new Error(r);if("string"!=typeof t.initial)throw new TypeError(o);if(!t.actions||!Object.keys(t.actions).length)throw new Error(s);this.initial=t.initial,this.state=this.initial,this.events=t.events,this.schema=[],this.buildSchema(t.actions)}transit(t,e){return i(this,void 0,void 0,(function*(){if(!this.can(e))throw new Error(u);yield this.emit("onLeaveState",t,e),this.state=e,yield this.emit("onEnterState",t,e)}))}emit(t,...e){return i(this,void 0,void 0,(function*(){"function"==typeof this.events[t]&&(yield this.events[t](...e))}))}buildSchema(t){Object.keys(t).forEach(e=>{this.schema.push({from:t[e].from,to:t[e].to}),this[e]=()=>i(this,void 0,void 0,(function*(){yield this.transit(t[e].from,t[e].to)}))})}can(t){return!!this.schema.find(e=>{const n="string"==typeof e.from?e.from===this.state:e.from.includes(this.state),i=e.to===t;return n&&i})}is(t){return this.state===t}reset(){this.state=this.initial}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,